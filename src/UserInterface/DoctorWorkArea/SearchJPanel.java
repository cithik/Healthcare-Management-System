/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorWorkArea;

import Business.DB4OUtil.DB4OUtil;
import Business.Ecosystem;
import Business.Encounter.Encounter;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.Enterprise.HospitalEnterprise;
import Business.Message.Message;
import Business.Network.Network;
import Business.Organization.DoctorAdminOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Organization.PatientAdminOrganization;
import Business.Patient.Patient;
import Business.Patient.PatientDirectory;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.Roles.PatientAdminRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientEncounterWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Krithika
 */
public class SearchJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private PatientDirectory patientDirectory;
    UserAccount account;
    Organization organization;
    Enterprise enterprise;
    Ecosystem business;
    private Ecosystem system;
    Patient patientObj = null;
    Network network;
    /**
     * Creates new form SearchJPanel
     */
    public SearchJPanel() {
        initComponents();
    }

    public SearchJPanel(JPanel upc, UserAccount account, Organization organization, Enterprise enterprise, Ecosystem business, Network network) {
        initComponents();
        this.userProcessContainer = upc;
        this.organization = organization;
        this.enterprise = enterprise;
        this.business = business;
        this.account = account;
        this.network = network;
        Message message = Message.getInstance();
        jTextField1.setText(message.getMessage());
        popOrganizationComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        requestEncounter = new javax.swing.JButton();
        patientSSN = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        viewRequestedEncounters = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        firstName = new javax.swing.JTextField();
        lastName = new javax.swing.JTextField();
        PatientNotFOund = new javax.swing.JLabel();
        SearchJButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        requestPatientAdmin = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Search Patient Information");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 23, -1, -1));

        requestEncounter.setText("Request Encounter");
        requestEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestEncounterActionPerformed(evt);
            }
        });
        add(requestEncounter, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, -1, -1));

        patientSSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientSSNActionPerformed(evt);
            }
        });
        add(patientSSN, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 76, -1));

        jLabel2.setText("SSN");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        viewRequestedEncounters.setText("View Requested Encounter");
        viewRequestedEncounters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRequestedEncountersActionPerformed(evt);
            }
        });
        add(viewRequestedEncounters, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, -1, -1));

        jLabel3.setText("First Name");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        jLabel4.setText("Last Name");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, -1, -1));

        firstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameActionPerformed(evt);
            }
        });
        add(firstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, 170, -1));
        add(lastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 170, -1));
        add(PatientNotFOund, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 270, 30));

        SearchJButton.setText("Search");
        SearchJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchJButtonActionPerformed(evt);
            }
        });
        add(SearchJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, -1, -1));

        jLabel5.setText("Request Patient Admin");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, -1));

        requestPatientAdmin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        requestPatientAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestPatientAdminActionPerformed(evt);
            }
        });
        add(requestPatientAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, -1, -1));

        jLabel6.setText("Message");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 310, -1, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 170, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void requestEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestEncounterActionPerformed
        UserAccount ua = (UserAccount) requestPatientAdmin.getSelectedItem();
        Organization patientAdminOrg =null;
        for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof PatientAdminOrganization){
                for (UserAccount userAccount : 
                        org.getUserAccountDirectory().getUserAccountList()){
                    if(userAccount==ua)
                        patientAdminOrg=org;
                }
            }
        }
        if(patientAdminOrg==null){
            PatientNotFOund.setText("Select a Patient admin");
        }
        if(patientObj!=null){
               PatientEncounterWorkRequest wr = new PatientEncounterWorkRequest();
               wr.setMessage("Request for Encounters");
               wr.setReceiver(ua);
               wr.setSender(account);
               wr.setStatus("Requested");
               wr.setPerson(patientObj);
               wr.setEncounterHistory(patientObj.getEncounters());
               patientAdminOrg.getWorkQueue().getWorkRequestList().add(wr);
               PatientNotFOund.setText("Request Sent");
           } else{
            PatientNotFOund.setText("Search for a Patient before requesting");
        }
    }//GEN-LAST:event_requestEncounterActionPerformed

    private void patientSSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientSSNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientSSNActionPerformed

    private void firstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameActionPerformed

    private void viewRequestedEncountersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRequestedEncountersActionPerformed
        // TODO add your handling code here:
        UserAccount ua = (UserAccount) requestPatientAdmin.getSelectedItem();
        Organization patientAdminOrg =null;
        for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof PatientAdminOrganization){
                for (UserAccount userAccount : 
                        org.getUserAccountDirectory().getUserAccountList()){
                    if(userAccount==ua)
                        patientAdminOrg=org;
                }
            }
        }
        if(patientAdminOrg==null){
            PatientNotFOund.setText("Select a Patient admin");
        }
        if(patientObj==null){
            PatientNotFOund.setText("Search for a Patient before requesting");
        }else{
            boolean accountRequest=false;
        for(WorkRequest wr : patientAdminOrg.getWorkQueue().getWorkRequestList()){
            if(wr.getSender()==account){
                accountRequest = true;
                PatientEncounterWorkRequest pewr =(PatientEncounterWorkRequest) wr;
                if(pewr.getPerson()==patientObj){
                    if(pewr.getStatus().equals("Approved")){
                      RetrieveInfoJPanel RIJPanel = new 
        RetrieveInfoJPanel(userProcessContainer, account, patientObj, pewr.getEncounterHistory(), enterprise, network);
                      userProcessContainer.add("ViewEncounters", RIJPanel);
                      CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                      layout.next(userProcessContainer);
                    }else{
                        PatientNotFOund.setText("Request Pending ");
                    }
                }
            }
        }
        if(!accountRequest)
            PatientNotFOund.setText("No requests found for the "
                    + "patient with the patient admin selected");
        }
    }//GEN-LAST:event_viewRequestedEncountersActionPerformed

    private void SearchJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchJButtonActionPerformed
        
        String patientSSNVal = patientSSN.getText();

        for(Enterprise ent: network.getEnterpriseDirectory().getEnterpriseList()){
            if(ent instanceof HospitalEnterprise){
        for (Patient p : ((HospitalEnterprise) ent).getPatientDirectory().getPatientDirectory()) {
            if (p.getSsn().equals(patientSSNVal)) {
                patientObj = (Patient) p;
                firstName.setText(patientObj.getFirstName());
                lastName.setText(patientObj.getLastName());
//                            for (Encounter encounter : patientObj.getEncounters().getEncounterList()) {
//                                Object row[] = new Object[2];
//                                row[0] = encounter;
//                                row[1] = encounter.getHospital();
//                                pe.addRow(row);
//               }             }
            }
        }
            }
        }
        
        if(patientObj==null){
            PatientNotFOund.setText("SSN not found");
        } else{
            PatientNotFOund.setText("Click on View Encounters to view history");
        }
    }//GEN-LAST:event_SearchJButtonActionPerformed
    
    public void popOrganizationComboBox() {
        requestPatientAdmin.removeAllItems(); 
        
        String patientSSNVal = patientSSN.getText();
        for(Enterprise ent: network.getEnterpriseDirectory().getEnterpriseList()){
        for(Organization org: ent.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof PatientAdminOrganization){
                for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()){
                    requestPatientAdmin.addItem(ua);
                }
            }
        }
    }
    }
    private void requestPatientAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestPatientAdminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_requestPatientAdminActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PatientNotFOund;
    private javax.swing.JButton SearchJButton;
    private javax.swing.JTextField firstName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField lastName;
    private javax.swing.JTextField patientSSN;
    private javax.swing.JButton requestEncounter;
    private javax.swing.JComboBox requestPatientAdmin;
    private javax.swing.JButton viewRequestedEncounters;
    // End of variables declaration//GEN-END:variables
}
